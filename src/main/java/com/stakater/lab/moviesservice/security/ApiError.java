package com.stakater.lab.moviesservice.security;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import lombok.NonNull;
import lombok.Value;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;

/**
 * Based on RFC
 *
 * Problem Details for HTTP APIs - https://tools.ietf.org/html/rfc7807
 *
 */
@Value
@JsonPropertyOrder({
        ApiError.TYPE,
        ApiError.TITLE,
        ApiError.STATUS,
        ApiError.DETAIL,
        ApiError.INSTANCE,
        ApiError.FIELD_ERRORS
})
public class ApiError implements Serializable {

    public static final String TYPE = "type";
    public static final String TITLE = "title";
    public static final String STATUS = "status";
    public static final String DETAIL = "detail";
    public static final String INSTANCE = "instance";
    public static final String FIELD_ERRORS = "field_errors";

    /**
     * A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when
     * dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).
     * When this member is not present, its value is assumed to be "about:blank".
     */
    private final String type;

    /**
     * A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4).
     */
    private final @NonNull String title;

    /**
     * The HTTP status status ([RFC7231], Section 6)
     * generated by the origin server for this occurrence of the problem.
     */
    private final @NonNull String status;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    private final String detail;

    /**
     * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further
     * information if dereferenced.
     */
    private final String instance;

    /**
     * Individual field errors
     */
    @JsonProperty(value = ApiError.FIELD_ERRORS)
    private final Collection<ApiFieldError> fieldErrors = new ArrayList<>();

    @lombok.Builder(builderClassName = "Builder", builderMethodName = "newBuilder", toBuilder = true)
    private ApiError(String type, String title, @NonNull String status, String detail, String instance) {
        this.type = type;
        this.title = title;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
    }

    public void addFieldError(String objectName, String field, String message) {
        fieldErrors.add(ApiFieldError.newBuilder().objectName(objectName).field(field).message(message).build());
    }
}
